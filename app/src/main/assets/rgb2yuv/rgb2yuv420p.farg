
#ifdef GL_ES
precision highp float;
#endif
varying vec2 vTextureCoord;				//vTextureCoord;
uniform sampler2D tex;			// 原始纹理
uniform float width;			// 纹理宽
uniform float height;			// 纹理高



//图像宽度 *0.5 图像高度的范围内数据是正确的


void main() {

	vec2 samplingPos =vec2(0.0,0.0);
	vec4 texel=vec4(0.0,0.0,0.0,0.0);

	vec3 offset = vec3(0.0625, 0.5, 0.5);
	//颜色系数矩阵 若输出颜色偏色可尝试交换ucoeff和vcoeff
	vec3 ycoeff = vec3(0.256816, 0.504154, 0.0979137);
	vec3 ucoeff = vec3(-0.148246, -0.29102, 0.439266);
	vec3 vcoeff = vec3(0.439271, -0.367833, -0.071438);



/* 公式
	mat4 RGBtoYUV(0.257,  0.439, -0.148, 0.0,
              0.504, -0.368, -0.291, 0.0,
              0.098, -0.071,  0.439, 0.0,
              0.0625, 0.500,  0.500, 1.0 );

YUV = RGBtoYUV * RGB;
*/
	vec2 nowTxtPos = vTextureCoord;
	vec2 size = vec2(width, height);//1920 1080


	vec2 yScale = vec2(4,1);
	vec2 uvScale = vec2(8,2);
	vec2 hehe =vec2(0.0,0.0);

/*
	FBO总大小为w*h*4  转换后YUV420P 总共占w*h*3/2的空间 
	则相对FBO总大小 u,v分量各占1/16   则 Y分量占1/16 *2 *2 = 1/4 =0.25 比例 

*/
// y 占1/4
	if(nowTxtPos.x < 0.25){ //1

// y base postion
		vec2 basePos1 = (nowTxtPos * size +hehe) ; //  0.99996的情况？
		vec2 basePos =vec2(int(basePos1.x),int(basePos1.y))* yScale;//取整
		//	 vec2 basePos =vec2(basePos1.x,basePos1.y)* yScale;//取整
// y1 y2 y3 y4
		float y1,y2,y3,y4;

		//1
		samplingPos =  basePos / size;
		texel = texture2D(tex, samplingPos);
		y1 = dot(texel.rgb, ycoeff);
		y1 += offset.x;

		//2
		basePos.x+=1.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		y2 = dot(texel.rgb, ycoeff);
		y2 += offset.x;

		//3
		basePos.x+=1.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		y3 = dot(texel.rgb, ycoeff);
		y3 += offset.x;

		//4
		basePos.x+=1.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		y4 = dot(texel.rgb, ycoeff);
		y4 += offset.x;

		//写入亮度值
		gl_FragColor = vec4(y1, y2, y3, y4);

	}
		//采集U
	else if(nowTxtPos.x >=0.25 && nowTxtPos.x < 0.375 && nowTxtPos.y < 0.5)
	{
		nowTxtPos.x -=0.25;//纹理坐标返回 (0,0)
		vec2 basePos1 = (nowTxtPos * size +hehe) ;
		vec2 basePos =vec2(int(basePos1.x),int(basePos1.y))* uvScale;//取整
		//得到像素坐标
		float v1,v2,v3,v4;

		//1
		basePos.x+=0.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		v1 = dot(texel.rgb, vcoeff);
		v1 += offset.z;
		//2
		basePos.x+=2.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		v2 = dot(texel.rgb, vcoeff);
		v2 += offset.z;
		//3
		basePos.x+=2.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		v3 = dot(texel.rgb, vcoeff);
		v3 += offset.z;
		//4
		basePos.x+=2.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		v4 = dot(texel.rgb, vcoeff);
		v4 += offset.z;


		//写入V值
		gl_FragColor = vec4(v1, v2, v3, v4);

	}
		//奇数行采集V
	else if(nowTxtPos.x >=0.25 && nowTxtPos.x < 0.375 && nowTxtPos.y >= 0.5)
	{
		nowTxtPos.x -=0.25;
		nowTxtPos.y -=0.5; //纹理坐标返回 (0,0)

		vec2 basePos1 = (nowTxtPos * size +hehe) ;
		vec2 basePos =vec2(int(basePos1.x),int(basePos1.y))* uvScale;//取整
		//得到像素坐标
		float u1,u2,u3,u4;

		//1
		basePos.x+=0.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		u1 = dot(texel.rgb, ucoeff);
		u1 += offset.y;
		//2
		basePos.x+=2.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		u2 = dot(texel.rgb, ucoeff);
		u2 += offset.y;
		//3
		basePos.x+=2.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		u3 = dot(texel.rgb, ucoeff);
		u3 += offset.y;
		//4
		basePos.x+=2.0;
		basePos.y+=0.0;
		samplingPos = basePos/size;
		texel = texture2D(tex, samplingPos);
		u4 = dot(texel.rgb, ucoeff);
		u4 += offset.y;

		//写入U值
		gl_FragColor = vec4(u1, u2, u3, u4);
	}
	else
	{
		gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
	}
}